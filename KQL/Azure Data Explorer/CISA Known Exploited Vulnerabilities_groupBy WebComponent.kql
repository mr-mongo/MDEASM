let workspace = '{_adx_workspace_name}';
let cvssscore = {_adx_cvssscore};
let cvss3score = {_adx_cvss3score};
let Cves = externaldata (CveId: string )
[
    h@'https://www.cisa.gov/sites/default/files/csv/known_exploited_vulnerabilities.csv'
]
with (format='csv', ingestionMapping='[{"Column":"CveId","Properties":{"Ordinal":"0"}}]')
|where CveId != 'cveID';
Cves
| join kind=rightsemi (EasmAssetWebComponent
    |where WorkspaceName == workspace
    |join kind=anti oldestsnapshot on SnapshotDateTime
    |where array_length(WebComponentCves) != 0
    |where WebComponentLastSeen > lastseen
    |mv-expand WebComponentCves
    |extend Cve = tostring(WebComponentCves.Cve), Cwe = tostring(WebComponentCves.Cwe), CvssScore = tolong(WebComponentCves.CvssScore), Cvss3Score = toreal(WebComponentCves.Cvss3Score)
    |where (CvssScore >= cvssscore or Cvss3Score >= cvss3score)
    |summarize hint.strategy=shuffle arg_max(SnapshotDateTime, *) by AssetUuid,WebComponentName,WebComponentVersion,Cve
    |project-keep WebComponentCategory,WebComponentName,WebComponentVersion,Cve,Cwe,CvssScore,Cvss3Score,AssetName,WebComponentLastSeen
) on $left.CveId == $right.Cve
//|project-reorder AssetName,WebComponentName,WebComponentVersion,Cve,CvssScore,Cvss3Score,Cwe
//|sort by WebComponentLastSeen desc
//|summarize Asset = make_list(pack_all()) by AssetName
//|summarize CVE = make_list(pack_all()) by Cve
|summarize WebComponent = make_list(pack_all()) by WebComponentName,WebComponentVersion