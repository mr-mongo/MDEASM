let workspace = '';
let cvssscore = {cvss_score};
let cvss3score = {cvss_3_score;
let Cves = externaldata (CveId: string )
[
    h@'https://www.cisa.gov/sites/default/files/csv/known_exploited_vulnerabilities.csv'
]
with (format='csv', ingestionMapping='[{"Column":"CveId","Properties":{"Ordinal":"0"}}]')
|where CveId != 'cveID';
Cves
| join kind=rightsemi (EasmAssetWebComponent
    |where WorkspaceName == workspace
    |where array_length(WebComponentCves) != 0
    |where WebComponentLastSeen > ago(60d)
    |mv-expand WebComponentCves
    |extend Cve = tostring(WebComponentCves.Cve), Cwe = tostring(WebComponentCves.Cwe), CvssScore = tolong(WebComponentCves.CvssScore), Cvss3Score = toreal(WebComponentCves.Cvss3Score)
    |where (CvssScore >= cvssscore or Cvss3Score >= cvss3score) 
    |project-keep WebComponentCategory,WebComponentName,WebComponentVersion,Cve,Cwe,CvssScore,Cvss3Score,AssetName,WebComponentLastSeen
    |summarize hint.strategy=shuffle arg_max(WebComponentLastSeen, *) by WebComponentCategory,WebComponentName,WebComponentVersion,Cve,Cwe,CvssScore,Cvss3Score,AssetName 
) on $left.CveId == $right.Cve
|project-reorder AssetName,WebComponentName,WebComponentVersion,Cve,CvssScore,Cvss3Score,Cwe
|sort by WebComponentLastSeen desc
//|summarize Asset = make_list(pack_all()) by AssetName
//|summarize CVE = make_list(pack_all()) by Cve
//|summarize WebComponent = make_list(pack_all()) by WebComponentName,WebComponentVersion