{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.20.4.51522",
      "templateHash": "15591707305485347254"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "appNameSuffix": {
      "type": "string",
      "defaultValue": "[uniqueString(resourceGroup().id, utcNow())]"
    },
    "easmRG": {
      "type": "string",
      "metadata": {
        "description": "The name of the EASM Resource Group"
      }
    },
    "easmWorkspace": {
      "type": "string",
      "metadata": {
        "description": "The name of the EASM Workspace"
      }
    },
    "servicePrincipalClientID": {
      "type": "string",
      "metadata": {
        "description": "Client ID of the Service Principal to assign Contributor rights to EASM Resource Group"
      }
    },
    "servicePrincipalClientSecret": {
      "type": "securestring",
      "metadata": {
        "description": "Client Secret of the Service Principal which will be stored in the Key Vault"
      }
    },
    "keyVaultSku": {
      "type": "string",
      "defaultValue": "standard",
      "allowedValues": [
        "premium",
        "standard"
      ],
      "metadata": {
        "description": "Key Vault SKU name"
      }
    },
    "kvName": {
      "type": "string",
      "defaultValue": "kv-mdeasm",
      "metadata": {
        "description": "The name of the Key Vault resource"
      }
    },
    "assetState": {
      "type": "string",
      "defaultValue": "Dependency",
      "allowedValues": [
        "Approved",
        "Candidate",
        "Dependency",
        "Monitor Only",
        "Requires Investigation"
      ],
      "metadata": {
        "description": "State to assign to the IPs in the EASM Workspace"
      }
    },
    "assetLabel": {
      "type": "string",
      "defaultValue": "AzureIP",
      "metadata": {
        "description": "Label to asssign to the IPs in the EASM Workspace"
      }
    }
  },
  "variables": {
    "key_vault_secret_name": "mdeasm-service-principal",
    "logic_app_name": "GetAzurePublicIPs",
    "key_vault_name": "[format('{0}-{1}', parameters('kvName'), parameters('appNameSuffix'))]",
    "connections_key_vault_name": "[format('keyvault-{0}', parameters('appNameSuffix'))]",
    "asset_state_mapping": {
      "Approved": "confirmed",
      "Candidate": "candidate",
      "Dependency": "associatedThirdparty",
      "Monitor Only": "associatedPartner",
      "Requires Investigation": "candidateInvestigate"
    }
  },
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2022-07-01",
      "name": "[variables('key_vault_name')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "[parameters('keyVaultSku')]"
        },
        "tenantId": "[subscription().tenantId]",
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": false,
        "enableRbacAuthorization": true,
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-10-01",
      "name": "[format('{0}/{1}', variables('key_vault_name'), variables('key_vault_secret_name'))]",
      "properties": {
        "value": "[parameters('servicePrincipalClientSecret')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('key_vault_name'))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2018-07-01-preview",
      "name": "[variables('connections_key_vault_name')]",
      "location": "[parameters('location')]",
      "kind": "V1",
      "properties": {
        "displayName": "keyvault",
        "api": {
          "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'keyvault')]"
        },
        "parameterValueType": "Alternative",
        "alternativeParameterValues": {
          "vaultName": "[variables('key_vault_name')]"
        }
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('key_vault_name'))]",
      "name": "[guid(resourceGroup().id, resourceId('Microsoft.KeyVault/vaults', variables('key_vault_name')))]",
      "properties": {
        "principalId": "[reference(resourceId('Microsoft.Logic/workflows', variables('logic_app_name')), '2017-07-01', 'full').identity.principalId]",
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('key_vault_name'))]",
        "[resourceId('Microsoft.Logic/workflows', variables('logic_app_name'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "name": "[guid(resourceGroup().id, 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "properties": {
        "principalId": "[reference(resourceId('Microsoft.Logic/workflows', variables('logic_app_name')), '2017-07-01', 'full').identity.principalId]",
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Logic/workflows', variables('logic_app_name'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "name": "[guid(resourceGroup().id, parameters('servicePrincipalClientID'))]",
      "properties": {
        "principalId": "[parameters('servicePrincipalClientID')]",
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "[variables('logic_app_name')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            },
            "asset_state": {
              "defaultValue": "[variables('asset_state_mapping')[parameters('assetState')]]",
              "type": "String"
            },
            "client_id": {
              "defaultValue": "[parameters('servicePrincipalClientID')]",
              "type": "String"
            },
            "easm_label": {
              "defaultValue": "[parameters('assetLabel')]",
              "type": "String"
            },
            "easm_location": {
              "defaultValue": "[parameters('location')]",
              "type": "String"
            },
            "easm_rg": {
              "defaultValue": "[parameters('easmRG')]",
              "type": "String"
            },
            "easm_workspace": {
              "defaultValue": "[parameters('easmWorkspace')]",
              "type": "String"
            },
            "subscription_id": {
              "defaultValue": "[subscription().subscriptionId]",
              "type": "String"
            },
            "tenant_id": {
              "defaultValue": "[subscription().tenantId]",
              "type": "String"
            }
          },
          "triggers": {
            "Recurrence": {
              "recurrence": {
                "frequency": "Week",
                "interval": 1
              },
              "evaluatedRecurrence": {
                "frequency": "Week",
                "interval": 1
              },
              "type": "Recurrence"
            }
          },
          "actions": {
            "Create_Label_if_not_exists": {
              "runAfter": {
                "Get_Workspace_Label": [
                  "Failed"
                ]
              },
              "type": "Http",
              "inputs": {
                "authentication": {
                  "audience": "[environment().resourceManager]",
                  "clientId": "@parameters('client_id')",
                  "secret": "@body('Get_SpSecret')?['value']",
                  "tenant": "@parameters('tenant_id')",
                  "type": "ActiveDirectoryOAuth"
                },
                "body": "@json(concat('{\"properties\":{\"displayName\":\"',parameters('easm_label'),'\"}}'))",
                "method": "PUT",
                "queries": {
                  "api-version": "2022-04-01-preview"
                },
                "uri": "[format('{0}/subscriptions/@{{parameters(''subscription_id'')}}/resourceGroups/@{{parameters(''easm_rg'')}}/providers/Microsoft.Easm/workspaces/@{{parameters(''easm_workspace'')}}/labels/@{{parameters(''easm_label'')}}', environment().resourceManager)]"
              }
            },
            "Dedup_public_ips": {
              "runAfter": {
                "For_each_topology": [
                  "Succeeded"
                ]
              },
              "type": "Compose",
              "inputs": "@skip(reverse(union(variables('public_ips'), array('[]'))),1)"
            },
            "For_each_public_ip": {
              "foreach": "@variables('public_ips')",
              "actions": {
                "Get_Asset_UUID": {
                  "runAfter": {},
                  "type": "Http",
                  "inputs": {
                    "authentication": {
                      "audience": "https://easm.defender.microsoft.com/",
                      "clientId": "@parameters('client_id')",
                      "secret": "@body('Get_SpSecret')?['value']",
                      "tenant": "@parameters('tenant_id')",
                      "type": "ActiveDirectoryOAuth"
                    },
                    "method": "GET",
                    "queries": {
                      "api-version": "2023-05-01-preview"
                    },
                    "uri": "https://@{parameters('easm_location')}.easm.defender.microsoft.com/subscriptions/@{parameters('subscription_id')}/resourceGroups/@{parameters('easm_rg')}/workspaces/@{parameters('easm_workspace')}/assets/@{base64(concat('ipAddress$$',item()))}"
                  }
                },
                "Update_Asset_State_and_Label": {
                  "runAfter": {
                    "Get_Asset_UUID": [
                      "Succeeded"
                    ]
                  },
                  "type": "Http",
                  "inputs": {
                    "authentication": {
                      "audience": "https://easm.defender.microsoft.com/",
                      "clientId": "@parameters('client_id')",
                      "secret": "@body('Get_SpSecret')?['value']",
                      "tenant": "@parameters('tenant_id')",
                      "type": "ActiveDirectoryOAuth"
                    },
                    "body": "@variables('update_body')",
                    "headers": {
                      "Content-Type": "application/json"
                    },
                    "method": "POST",
                    "queries": {
                      "api-version": "2023-05-01-preview",
                      "filter": "@{concat('uuid = \"',body('Get_Asset_UUID')?['uuid'],'\"')}"
                    },
                    "uri": "https://@{parameters('easm_location')}.easm.defender.microsoft.com/subscriptions/@{parameters('subscription_id')}/resourceGroups/@{parameters('easm_rg')}/workspaces/@{parameters('easm_workspace')}/assets"
                  }
                }
              },
              "runAfter": {
                "Set_update_body": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "For_each_topology": {
              "foreach": "@body('List_Resource_Topologies')?['value']",
              "actions": {
                "For_each_resource": {
                  "foreach": "@item()?['properties']?['topologyResources']",
                  "actions": {
                    "Is_InternetFacing": {
                      "actions": {
                        "For_each_InternetFacing": {
                          "foreach": "@item()?['info']",
                          "actions": {
                            "Is_PublicIp": {
                              "actions": {
                                "Append_to_public_ips": {
                                  "runAfter": {},
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "public_ips",
                                    "value": "@item()?['value']"
                                  }
                                }
                              },
                              "runAfter": {},
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@item()?['name']",
                                      "PublicIp"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "runAfter": {},
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {},
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@item()?['networkZones']",
                              "InternetFacing"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    }
                  },
                  "runAfter": {},
                  "type": "Foreach"
                }
              },
              "runAfter": {
                "List_Resource_Topologies": [
                  "Succeeded"
                ]
              },
              "type": "Foreach",
              "runtimeConfiguration": {
                "concurrency": {
                  "repetitions": 1
                }
              }
            },
            "Get_SpSecret": {
              "runAfter": {
                "Initialize_update_body": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                  }
                },
                "method": "get",
                "path": "[format('/secrets/@{{encodeURIComponent(''{0}'')}}/value', variables('key_vault_secret_name'))]"
              }
            },
            "Get_Workspace_Label": {
              "runAfter": {
                "Set_deduped_public_ips": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "authentication": {
                  "audience": "[environment().resourceManager]",
                  "clientId": "@parameters('client_id')",
                  "secret": "@body('Get_SpSecret')?['value']",
                  "tenant": "@parameters('tenant_id')",
                  "type": "ActiveDirectoryOAuth"
                },
                "headers": {
                  "Authorization": ""
                },
                "method": "GET",
                "queries": {
                  "api-version": "2022-04-01-preview"
                },
                "uri": "[format('{0}/subscriptions/@{{parameters(''subscription_id'')}}/resourceGroups/@{{parameters(''easm_rg'')}}/providers/Microsoft.Easm/workspaces/@{{parameters(''easm_workspace'')}}/labels/@{{parameters(''easm_label'')}}', environment().resourceManager)]"
              }
            },
            "Initialize_public_ips": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "public_ips",
                    "type": "array"
                  }
                ]
              }
            },
            "Initialize_update_body": {
              "runAfter": {
                "Initialize_public_ips": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "update_body",
                    "type": "object"
                  }
                ]
              }
            },
            "List_Resource_Topologies": {
              "runAfter": {
                "Get_SpSecret": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "authentication": {
                  "type": "ManagedServiceIdentity"
                },
                "method": "GET",
                "queries": {
                  "api-version": "2020-01-01",
                  "includeResourceInformation": "true"
                },
                "uri": "[format('{0}/subscriptions/@{{parameters(''subscription_id'')}}/providers/Microsoft.Security/topologies', environment().resourceManager)]"
              }
            },
            "Set_deduped_public_ips": {
              "runAfter": {
                "Dedup_public_ips": [
                  "Succeeded"
                ]
              },
              "type": "SetVariable",
              "inputs": {
                "name": "public_ips",
                "value": "@outputs('Dedup_public_ips')"
              }
            },
            "Set_update_body": {
              "runAfter": {
                "Create_Label_if_not_exists": [
                  "Succeeded",
                  "Skipped"
                ]
              },
              "type": "SetVariable",
              "inputs": {
                "name": "update_body",
                "value": "@json(concat('{\"state\":\"',parameters('asset_state'),'\", \"labels\": {\"',parameters('easm_label'),'\": true}}'))"
              }
            }
          },
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "keyvault": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('connections_key_vault_name'))]",
                "connectionName": "[variables('connections_key_vault_name')]",
                "connectionProperties": {
                  "authentication": {
                    "type": "ManagedServiceIdentity"
                  }
                },
                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'keyvault')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('connections_key_vault_name'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "subscriptionRoleAssignmentReader",
      "subscriptionId": "[subscription().subscriptionId]",
      "location": "[resourceGroup().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(resourceId('Microsoft.Logic/workflows', variables('logic_app_name')), '2017-07-01', 'full').identity.principalId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.20.4.51522",
              "templateHash": "7779378497053989153"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            }
          },
          "variables": {
            "reader_role": "acdd72a7-3385-48ef-bd42-f606fba81ae7"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "name": "[guid(subscription().tenantId, subscription().id)]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('reader_role'))]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Logic/workflows', variables('logic_app_name'))]"
      ]
    }
  ]
}